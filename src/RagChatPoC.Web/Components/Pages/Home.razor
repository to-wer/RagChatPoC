@page "/"
@using RagChatPoC.Web.ViewModels
@inject ChatViewModel ViewModel

<PageTitle>Home</PageTitle>

<h3>Chat mit deinem RAG-System</h3>

<div class="chat-container" style="max-width: 600px; margin: auto;">
    @foreach (var message in ViewModel.Messages)
    {
        <div class="@message.Role.ToLower()">
            <strong>@message.Role:</strong> @message.Content
        </div>
    }

    <div class="mt-3">
        <textarea class="form-control" @bind="ViewModel.CurrentMessage" placeholder="Frage stellen..." rows="3" @onkeydown="@OnEnterPress"></textarea>
        <button class="btn btn-primary mt-2" @onclick="OnSendAsync" disabled="@ViewModel.IsBusy">Senden</button>
        <div class="form-check mt-2">
            <input class="form-check-input" type="checkbox" id="useStreaming" @bind="ViewModel.UseStreaming" />
            <label class="form-check-label" for="useStreaming">Streaming verwenden</label>
        </div>
    </div>

    @if (ViewModel.IsBusy)
    {
        <p><em>Antwort wird generiert ...</em></p>
    }
</div>

@code {

    private async Task OnSendAsync()
    {
        await ViewModel.SendMessageAsync();
        StateHasChanged(); // manuell nötig bei Streaming
    }

    private async Task OnEnterPress(KeyboardEventArgs e)
    {
        if (e is { Key: "Enter", ShiftKey: false })
        {
            //e.PreventDefault(); // keine neue Zeile
            await OnSendAsync();
        }
    }
    
}