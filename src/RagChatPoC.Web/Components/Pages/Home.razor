@page "/"
@using RagChatPoC.Web.ViewModels
@inject ChatViewModel ViewModel
@inject ILogger<Home> Logger

<PageTitle>Home</PageTitle>

<h3>Chat mit deinem RAG-System</h3>

<div class="chat-container" style="max-width: 600px; margin: auto;">
    @foreach (var message in ViewModel.Messages.Where(message => !string.IsNullOrEmpty(message.Message.Content)))
    {
        <div class="@message.Message.Role.ToLower()" style="white-space: pre-wrap;">
            <strong>@message.Message.Role:</strong>
            <span class="animated-text">
                @message.Message.Content
                @if (ViewModel.IsStreaming && message == ViewModel.Messages.LastOrDefault(m => m.Message.Role == "assistant"))
                {
                    <span class="blinking-caret">█</span>
                }
            </span>
        </div>

        @if (message.UsedContextChunks.Any())
        {
            <details class="context-box mt-2 mb-3 p-3">
                <summary class="mb-2 h6">📚 Verwendete Quellen anzeigen</summary>
                <ul class="mt-2">
                    @foreach (var ctx in message.UsedContextChunks)
                    {
                        <li class="mb-2">
                            <strong>@ctx.SourceFile</strong><br/>
                            <span class="text-muted">@ctx.Snippet</span>
                            @if (ctx.Score.HasValue)
                            {
                                <span class="badge bg-secondary ms-2">Score: @ctx.Score.Value:F2</span>
                            }
                        </li>
                    }
                </ul>
            </details>
        }
    }


    @if (ViewModel.IsBusy)
    {
        <p><em>Antwort wird generiert ...</em></p>
    }

    <div class="mt-3">
        <textarea class="form-control" @bind="ViewModel.CurrentMessage" placeholder="Frage stellen..." rows="3"
                  @onkeydown="@OnEnterPress"></textarea>
        <button class="btn btn-primary mt-2" @onclick="OnSendAsync" disabled="@ViewModel.IsBusy">Senden</button>
        <div class="form-check mt-2">
            <input class="form-check-input" type="checkbox" id="useStreaming" @bind="ViewModel.UseStreaming"/>
            <label class="form-check-label" for="useStreaming">Streaming verwenden</label>
        </div>
    </div>
</div>

@code {

    protected override void OnInitialized()
    {
        ViewModel.OnNewToken += () =>
        {
            InvokeAsync(StateHasChanged); // Live-Update bei jedem Token
        };
    }

    private async Task OnSendAsync()
    {
        Logger.LogDebug("OnSendAsync");
        await ViewModel.SendMessageAsync();
        StateHasChanged(); // manuell nötig bei Streaming
    }

    private async Task OnEnterPress(KeyboardEventArgs e)
    {
        if (e is { Key: "Enter", ShiftKey: false })
        {
            //e.PreventDefault(); // keine neue Zeile
            await OnSendAsync();
        }
    }

}