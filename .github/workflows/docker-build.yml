name: Docker Build

on:
  push:
    branches: [ "main" ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    
    steps:
      - name: Convert image name to lowercase
        run: |
          IMAGE_NAME=$(echo "${{ env.IMAGE_NAME }}" | tr '[:upper:]' '[:lower:]')
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.x'
          
      - name: Setup Java (f√ºr SonarQube)
          uses: actions/setup-java@v3
          with:
            distribution: 'temurin'
            java-version: '17'

      - name: Install dotnet-coverage
        # if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: |
          dotnet tool install --global dotnet-coverage

      - name: Restore dependencies
        run: dotnet restore
        working-directory: src

      - name: Build
        run: dotnet build --no-restore --configuration Release
        working-directory: src

      - name: Run tests
        run: dotnet-coverage collect "dotnet test --no-build --configuration Release" -f xml -o "coverage.xml"
        working-directory: src
        
      - name: Publish API
        run: dotnet publish RagChatPoC.Api/RagChatPoC.Api.csproj --configuration Release
        working-directory: src

      - name: Publish Web
        run: dotnet publish RagChatPoC.Web/RagChatPoC.Web.csproj --configuration Release
        working-directory: src

      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 #v3.5.0
        with:
          cosign-release: 'v2.2.4'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata api
        id: meta-api
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api
          tags: |
            type=ref,event=branch,pattern=main,local=true
            type=ref,event=branch,pattern=*,prefix=,sanitize=true
            type=ref,event=tag,pattern=v*,local=true

      - name: Extract Docker metadata web
        id: meta-web
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/web
          tags: |
            type=ref,event=branch,pattern=main,local=true
            type=ref,event=branch,pattern=*,prefix=,sanitize=true
            type=ref,event=tag,pattern=v*,local=true

      - name: Build and push Docker image api
        id: build-and-push-api
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: ./src/RagChatPoC.Api/bin/Release/net9.0/publish
          file: src/RagChatPoC.Api/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-api.outputs.tags }}
          labels: ${{ steps.meta-api.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Docker image web
        id: build-and-push-web
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: ./src/RagChatPoC.Web/bin/Release/net9.0/publish
          file: src/RagChatPoC.Web/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-web.outputs.tags }}
          labels: ${{ steps.meta-web.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Sign the published Docker image api
        if: ${{ github.event_name != 'pull_request' }}
        env:
          TAGS: ${{ steps.meta-api.outputs.tags }}
          DIGEST: ${{ steps.build-and-push-api.outputs.digest }}
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}

      - name: Sign the published Docker image web
        if: ${{ github.event_name != 'pull_request' }}
        env:
          TAGS: ${{ steps.meta-web.outputs.tags }}
          DIGEST: ${{ steps.build-and-push-web.outputs.digest }}
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}

      - name: 'Clean up docker images api'
        uses: dataaxiom/ghcr-cleanup-action@v1
        with:
          dry-run: false
          keep-n-tagged: 10
          delete-untagged: true
          token: ${{ secrets.GITHUB_TOKEN }}
          package: ragchatpoc/api

      - name: 'Clean up docker images web'
        uses: dataaxiom/ghcr-cleanup-action@v1
        with:
          dry-run: false
          #          keep-n-tagged: 10
          delete-untagged: true
          #          delete-partial-images: true
          token: ${{ secrets.GITHUB_TOKEN }}
          package: ragchatpoc/web